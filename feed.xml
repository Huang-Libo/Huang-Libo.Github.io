<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://huang-libo.github.io/</id><title>BOB's blog</title><subtitle>BOB BOB BOB 开坦克的 BOB 。</subtitle> <updated>2021-07-23T02:57:07+08:00</updated> <author> <name>Huang Libo</name> <uri>https://huang-libo.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://huang-libo.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="https://huang-libo.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2021 Huang Libo </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>[WIP]【WWDC17】优化 APP 启动之 dyld</title><link href="https://huang-libo.github.io/posts/App-Startup-Time-dyld/" rel="alternate" type="text/html" title="[WIP]【WWDC17】优化 APP 启动之 dyld" /><published>2021-07-07T00:00:00+08:00</published> <updated>2021-07-23T02:56:00+08:00</updated> <id>https://huang-libo.github.io/posts/App-Startup-Time-dyld/</id> <content src="https://huang-libo.github.io/posts/App-Startup-Time-dyld/" /> <author> <name>Huang Libo</name> </author> <category term="攻城狮" /> <category term="WWDC" /> <summary> 目录 前言 术语 Darwin 里的 dyld 的全称 启动时间（Startup Time） 启动闭包（Launch Closure） 回顾 WWDC16：优化 APP 启动的建议 减少启动阶段的任务 多使用 Swift Instruments: Static initializer tracing dyld 简史 dyld 1.0 (1996–2004) 前言 WWDC17 - Session413: &amp;lt;App Startup Time: Past, Present, and Future&amp;gt; 详细介绍了 dyld ，并给出了 APP 启动优化相关的建议。演讲者来自 dyld Tea... </summary> </entry> <entry><title>【2019】优化 APP 启动</title><link href="https://huang-libo.github.io/posts/Optimizing-App-Launch/" rel="alternate" type="text/html" title="【2019】优化 APP 启动" /><published>2021-06-06T00:00:00+08:00</published> <updated>2021-07-22T13:21:08+08:00</updated> <id>https://huang-libo.github.io/posts/Optimizing-App-Launch/</id> <content src="https://huang-libo.github.io/posts/Optimizing-App-Launch/" /> <author> <name>Huang Libo</name> </author> <category term="攻城狮" /> <category term="WWDC" /> <summary> 目录 前言 1. 什么是启动 暖场小故事 为什么启动很重要 1. 第一印象 2. 可以反映整体的代码质量 3. 性能 启动的类型 1. 冷启动 2. 热启动 3. Resume 不同启动类型的对比 启动的目标耗时：400毫秒 案例：Maps APP 的启动 启动的 6 个阶段 1. System Interface 1.1 dyld 1.... </summary> </entry> <entry><title>【iOS 14】Objective-C Runtime 的优化</title><link href="https://huang-libo.github.io/posts/Objective-C-Runtime-Changes-in-iOS-14/" rel="alternate" type="text/html" title="【iOS 14】Objective-C Runtime 的优化" /><published>2021-05-17T00:00:00+08:00</published> <updated>2021-06-19T22:41:41+08:00</updated> <id>https://huang-libo.github.io/posts/Objective-C-Runtime-Changes-in-iOS-14/</id> <content src="https://huang-libo.github.io/posts/Objective-C-Runtime-Changes-in-iOS-14/" /> <author> <name>Huang Libo</name> </author> <category term="攻城狮" /> <category term="WWDC" /> <summary> 目录 前言 新特性的适配 1. 新增类型：class_rw_ext_t class_ro_t Clean memory &amp;amp; Dirty memory class_rw_t 从 class_rw_t 中拆分出 class_rw_ext_t 实例 macOS 的 Mail macOS 版的 WeChat 使用 Runtime APIs 2. 相对方法列表（ Reletive Method Lists ） Objective-C 方法的 3 个部分 以 init 方法为例 进程中内存的划分 使用普通的方法列表( ... </summary> </entry> <entry><title>po、p、v 命令；LLDB 的自定义 Data Formatter；在 LLDB 中使用 Python 脚本</title><link href="https://huang-libo.github.io/posts/LLDB-beyond-po/" rel="alternate" type="text/html" title="po、p、v 命令；LLDB 的自定义 Data Formatter；在 LLDB 中使用 Python 脚本" /><published>2021-03-02T00:00:00+08:00</published> <updated>2021-06-19T21:53:12+08:00</updated> <id>https://huang-libo.github.io/posts/LLDB-beyond-po/</id> <content src="https://huang-libo.github.io/posts/LLDB-beyond-po/" /> <author> <name>Huang Libo</name> </author> <category term="攻城狮" /> <category term="WWDC" /> <summary> 目录 前言 LLDB 常用命令 po、p、v LLDB 常用命令一：po po 的常见用法 po 是 expression 命令的 alias 创建自定义的 alias po 的原理 LLDB 常用命令二：p p 是 expression 命令的 alias p 的原理 LLDB 常用命令三：v v 是 frame variable 命令的 alias v 的原理 po，p，v 的使用场景 ... </summary> </entry> <entry><title>警惕 NSTimer 引起的循环引用</title><link href="https://huang-libo.github.io/posts/NSTimer-circular-reference/" rel="alternate" type="text/html" title="警惕 NSTimer 引起的循环引用" /><published>2021-02-20T00:00:00+08:00</published> <updated>2021-06-17T14:34:00+08:00</updated> <id>https://huang-libo.github.io/posts/NSTimer-circular-reference/</id> <content src="https://huang-libo.github.io/posts/NSTimer-circular-reference/" /> <author> <name>Huang Libo</name> </author> <category term="攻城狮" /> <category term="iOS Dev Tips" /> <summary> 典型案例：使用 Target-Action 模式添加 NSTimer 考虑这种场景：进入一个页面后，启动 timer；退出此页面后，timer 也销毁。 看看下面的代码实现有什么问题： #import "ViewController.h" @interface ViewController () @property (nonatomic, strong) NSTimer *timer; @end @implementation ViewController - (void)viewDidLoad { [super viewDidLoad]; self.timer = [NSTimer timerWithTimeInterval:1 target:self selector:@selector(timerTriggered:) userInfo:ni... </summary> </entry> </feed>
